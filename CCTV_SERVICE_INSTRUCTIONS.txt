# INSTRUCTIONS POUR SERVICE CCTV - GUIDE COMPLET

## OBJECTIF
Cr√©er un service web qui permet de visionner les vid√©os d'un syst√®me CCTV via une API sp√©cifique avec authentification XML et r√®gle des "dossiers D".

## ARCHITECTURE CCTV EXISTANTE

### Serveur CCTV
- **URL principale**: http://xxx.xxx.fr:8090
- **URL TLS**: https://xxx.xxx.fr:4434
- **Login**: CCTV
- **Mot de passe hash√©**: xxxxxxxxxxxxxxxxx

### Structure des cam√©ras (6 cam√©ras disponibles)
```
Cam√©ra 1: /CCTV/RecSpace_360673CBB6824C65B7CB3A2F611A6110/CH001_50F36D36752750F36D36752750F30000/Regular
Cam√©ra 2: /CCTV/RecSpace_360673CBB6824C65B7CB3A2F611A6110/CH002_50F36D36752750F36D36752750F30001/Regular
Cam√©ra 3: /CCTV/RecSpace_360673CBB6824C65B7CB3A2F611A6110/CH003_50F36D36752750F36D36752750F30002/Regular
Cam√©ra 4: /CCTV/RecSpace_360673CBB6824C65B7CB3A2F611A6110/CH004_50F36D36752750F36D36752750F30003/Regular
Cam√©ra 5: /CCTV/RecSpace_360673CBB6824C65B7CB3A2F611A6110/CH005_50F36D36752750F36D36752750F30004/Regular
Cam√©ra 6: /CCTV/RecSpace_360673CBB6824C65B7CB3A2F611A6110/CH006_50F36D36752750F36D36752750F30005/Regular
```

## FONCTIONNALIT√âS REQUISES

### 1. AUTHENTIFICATION
- **Endpoint**: `/cgi-bin/authLogin.cgi`
- **Param√®tres**: `user=CCTV&serviceKey=1&pwd=xxxxxxxxxxxxxxxxx`
- **R√©ponse XML**: Token dans `<authSid>TOKEN_ICI</authSid>`
- **Dur√©e**: 1 heure
- **Gestion**: Auto-renouvellement avant expiration

### 2. R√àGLE DES "DOSSIERS D" (CRITIQUE)
Pour chaque heure recherch√©e, essayer DANS CET ORDRE:
1. **Dossier normal**: `/YYYY-MM-DD/HH/` (ex: `/2025-07-15/08/`)
2. **Dossier avec D**: `/YYYY-MM-DD/HHD/` (ex: `/2025-07-15/08D/`)

**Important**: Les dossiers normaux (sans D) retournent `success=true, has_datas=False` m√™me s'ils sont vides.
Les dossiers D retournent `success=None, has_datas=True` quand ils contiennent des vid√©os.

### 3. LISTING DES VID√âOS
- **Endpoint**: `/cgi-bin/filemanager/utilRequest.cgi`
- **Fonction**: `func=get_list`
- **Param√®tres obligatoires**:
  ```
  sid=TOKEN
  is_iso=0
  list_mode=all
  path=CHEMIN_CAMERA/YYYY-MM-DD/HH[D]/
  hidden_file=0
  dir=ASC
  limit=200
  sort=filename
  start=0
  ```

### 4. T√âL√âCHARGEMENT DES VID√âOS
- **Endpoint**: `/cgi-bin/filemanager/utilRequest.cgi`
- **Fonction**: `func=get_viewer`
- **Param√®tres**:
  ```
  sid=TOKEN
  source_path=CHEMIN_COMPLET_DOSSIER
  source_file=NOM_FICHIER.mp4
  ```

### 5. CACHE INTELLIGENT
- **Stockage local**: √âviter les t√©l√©chargements r√©p√©t√©s
- **Nommage**: `cam{ID}_{timestamp}_{hash}.mp4`
- **R√©pertoire**: `/static/cache/videos/`

### 6. FORMAT DE R√âPONSE API
L'API doit retourner ce format JSON exact:
```json
[
  {
    "0": "/static/cache/videos/cam1_1752567000_abc123.mp4",
    "1": "/static/cache/videos/cam1_1752567120_def456.mp4"
  },
  10,
  -60,
  1,
  {
    "0": 1752567000,
    "1": 1752567120
  }
]
```

**Explication**:
- `[0]`: Dictionnaire des URLs des vid√©os (index -> URL)
- `[1]`: Index de la vid√©o la plus proche du timestamp demand√©
- `[2]`: D√©calage en secondes entre la vid√©o trouv√©e et le timestamp demand√©
- `[3]`: ID de la cam√©ra
- `[4]`: Dictionnaire des timestamps (index -> timestamp Unix)

### 7. INTERFACE WEB
- **S√©lecteur de cam√©ra**: 1 √† 6
- **S√©lecteur datetime**: HTML5 datetime-local
- **Vid√©o principale**: Affiche la vid√©o la plus proche
- **Grille de vid√©os**: Toutes les vid√©os disponibles (¬±10 autour de la cible)
- **Test API**: Bouton pour v√©rifier le fonctionnement

## PI√àGES √Ä √âVITER

### üö® PI√àGE #1: PARSING XML INCORRECT
**Probl√®me**: Chercher le token dans une structure XML incorrecte
**Solution**: Le token est dans `root.find('.//authSid').text` ou `result.QDocRoot.authSid[0]`

### üö® PI√àGE #2: R√àGLE DES DOSSIERS D MAL IMPL√âMENT√âE
**Probl√®me**: Ne pas essayer les deux types de dossiers ou mauvais ordre
**Solution**: 
1. Tester d'abord le dossier normal (`08/`)
2. Si vide, tester le dossier D (`08D/`)
3. S'arr√™ter d√®s qu'on trouve des vid√©os

### üö® PI√àGE #3: PROBL√àMES CORS
**Probl√®me**: Interface sur port A, API sur port B -> "Failed to fetch"
**Solution**: Servir l'interface ET l'API depuis le m√™me serveur/port

### üö® PI√àGE #4: GESTION DES HEURES
**Probl√®me**: Ne v√©rifier qu'une seule heure
**Solution**: V√©rifier heure-1, heure, heure+1 pour plus de chances de trouver des vid√©os

### üö® PI√àGE #5: EXTRACTION TIMESTAMP
**Probl√®me**: Timestamps incorrects depuis les noms de fichiers
**Format attendu**: `YYYYMMDD_HHMMSS_*.mp4`
**Exemple**: `20250715_081000_001.mp4` -> timestamp Unix

### üö® PI√àGE #6: INTERFACES TROP COMPLEXES
**Probl√®me**: Synchronisation datetime/timestamp/timezone compliqu√©e
**Solution**: Utiliser datetime-local HTML5 simple, convertir c√¥t√© serveur

## TECHNOLOGIES RECOMMAND√âES

### Backend (choisir une)
- **Python Flask**: Simple, rapide √† d√©velopper
- **Node.js Express**: Bon pour API REST
- **Go**: Performance, mais plus verbeux
- **PHP**: Si environnement existant

### Frontend
- **HTML/CSS/JS vanilla**: Simple, pas de d√©pendances
- **React**: Si besoin d'interface riche
- **Vue.js**: Alternative l√©g√®re √† React

## ENDPOINTS √Ä IMPL√âMENTER

### `/api/cctv/videos` (GET)
**Param√®tres**:
- `target`: Timestamp Unix cible
- `camera`: ID cam√©ra (1-6)

**R√©ponse**: Format JSON d√©crit ci-dessus

### `/api/health` (GET)
**R√©ponse**: `{"status": "healthy", "timestamp": UNIX_TIME}`

### `/` (GET)
Interface web principale

## DONN√âES DE TEST
**Timestamp avec vid√©os**: `1752567000` (2025-07-15T08:10:00)
**URL test**: `/api/cctv/videos?target=1752567000&camera=1`

## STRUCTURE DE FICHIERS SUGG√âR√âE
```
/
‚îú‚îÄ‚îÄ app.py (ou server.js, main.go...)
‚îú‚îÄ‚îÄ static/
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ cache/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ videos/ (cr√©√© automatiquement)
‚îÇ   ‚îî‚îÄ‚îÄ videos/
‚îÇ       ‚îî‚îÄ‚îÄ videoerror.mp4 (vid√©o par d√©faut si aucune trouv√©e)
‚îî‚îÄ‚îÄ CCTV_SERVICE_INSTRUCTIONS.txt (ce fichier)
```

## VARIABLES D'ENVIRONNEMENT OPTIONNELLES
```
CCTV_SERVER_IP=http://xxx.xxx.fr:8090
CCTV_SERVER_TLS=https://xxx.xxx.fr:4434
CCTV_LOGIN=CCTV
CCTV_HASHED_PASSWORD=xxxxxxxxxxxxxxxxx
```

## VALIDATION
1. **Test d'authentification**: Token r√©cup√©r√© correctement
2. **Test r√®gle D**: Dossiers D trouv√©s quand dossiers normaux vides
3. **Test API**: Format JSON correct retourn√©
4. **Test interface**: Pas d'erreurs CORS
5. **Test cache**: Vid√©os mises en cache apr√®s premier t√©l√©chargement

## NOTES IMPORTANTES
- **URL encoding**: Les chemins doivent √™tre URL-encod√©s pour l'API
- **Gestion d'erreur**: Retourner vid√©o d'erreur si aucune vid√©o trouv√©e
- **Performance**: Impl√©menter le cache pour √©viter re-t√©l√©chargements
- **S√©curit√©**: Ne pas exposer les credentials dans les logs
- **Threading**: G√©rer l'acc√®s concurrent au token d'authentification

Cette impl√©mentation existe d√©j√† et fonctionne en Python Flask dans `/var/www/actinvent3/app.py` comme r√©f√©rence.